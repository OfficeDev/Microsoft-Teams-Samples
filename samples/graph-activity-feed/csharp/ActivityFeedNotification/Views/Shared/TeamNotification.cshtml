@model TabActivityFeed.Model.TaskDetails
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    @*<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">*@
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
    <style>
        .select2-container {
            width: inherit !important;
        }

        .select2-container--default .select2-results__option--highlighted.select2-results__option--selectable {
            background-color: whitesmoke !important;
            color: black !important;
        }

        .select2-container--default .select2-selection--multiple {
            background-color: whitesmoke !important;
            color: black !important;
            border: none;
        }

        .assigned {
            padding-right: 1rem;
        }

        .desc {
            width: 30%;
            padding: 15px;
            font-family: monospace;
            font-weight: 100;
            font-size: 14px;
            margin: 0px auto;
            display: none;
        }

        .radioClass {
            padding: 15px;
            margin-top: 10px;
            color: #fff;
            font-size: 16px;
        }

        label {
            color: #fff;
            font-size: 16px;
        }
    </style>

    <title>Screen</title>
    <script>
        $(document).ready(function () {
            microsoftTeams.app.initialize().then(() => {  
                $('input[type="radio"]').click(function () {
                    var inputValue = $(this).attr("value");
                    var targetBox = $("." + inputValue);
                    $(".desc").not(targetBox).hide();
                    $(targetBox).show();
                });
            });
        });

        var token = localStorage.getItem("accessToken");
        var username = "";
        var userId = "";
        var teamchannelID = "";
        var teamId = "";

        microsoftTeams.app.getContext().then((context) => {
            teamchannelID = context.channel.id;
            username = context.user.userPrincipalName;
            userId = context.user.id;
            teamId = context.team.groupId;
        });

        var encodedWebUrl = encodeURI(window.location.origin);
        var encodedContext = encodeURI('{"subEntityId": "task456"}');
        var taskItemUrl = 'https://teams.microsoft.com/l/entity/<appid>/tasklist123?webUrl=' + encodedWebUrl + '&context=' + encodedContext;
        var empty = true;

        $('input[type="text"]').each(function () {
            if ($(this).val() != "") {
                empty = false;
                return false;
            }
        });

        function SendNotificationToChannel() {
            var action = "EntityTopic";
            var id = "";
            microsoftTeams.app.getContext().then((context) => {
                id = context.team.groupId;
                let taskDetails = {
                    title: $('#title').val(),
                    description: $('#description').val(),
                    userName: username,
                    taskInfoAction: action,
                    channelId: teamchannelID,
                    access_token: token,
                    taskItemLink: taskItemUrl,
                    teamId: id
                };

                $.ajax({
                    type: 'POST',
                    url: '/sendNotificationToTeam',
                    dataType: 'json',
                    data: taskDetails
                });
            });
            return true;
        };

        function customTopicTeamNotification() {
            var action = "customTopic";
            var id = ""; 

            microsoftTeams.app.getContext().then((context) => {
                id = context.team.groupId;
                let taskDetails = {
                    DeployementTitle: $('#DeployementTitle').val(),
                    DeploymentDescription: $('#DeploymentDescription').val(),
                    taskInfoAction: action,
                    userName: username,
                    channelId: teamchannelID,
                    access_token: token,
                    taskItemLink: taskItemUrl,
                    teamId: id
                };

                $.ajax({
                    type: 'POST',
                    url: '/sendNotificationToTeam',
                    dataType: 'json',
                    data: taskDetails
                });
            });
            return true;
        };

        function SendDefaultNotification() {
            let taskDetails = {
                userName: username,
                channelId: teamchannelID,
                access_token: token,
                taskItemLink: taskItemUrl,
                teamId: teamId
            };

            $.ajax({
                type: 'POST',
                url: '/sendDefaultNotifications',
                dataType: 'json',
                data: taskDetails
            });

            return true;
        };

        function channelTabTeamNotification() {
            var action = "channelTab";
            var id = "";

            microsoftTeams.app.getContext().then((context) => {
                id = context.team.groupId;

                let taskDetails = {
                reservationId: $("#reservationId").val(),
                DeployementTitle: $('#reservationTitle').val(),
                currentSlot: $('#currentSlot').val(),
                taskInfoAction: action,
                userName: username,
                channelId: teamchannelID,
                access_token: token,
                taskItemLink: taskItemUrl,
                teamId: id
                };

                $.ajax({
                    type: 'POST',
                    url: '/sendNotificationToTeam',
                    dataType: 'json',
                    data: taskDetails
                });
            });
            return true;
        };
    </script>
</head>

<body>
    <div id="login">
        <h4>Click on login button to continue</h4>
        <button onclick="login()">Login</button>
    </div>
    <button onclick="requestConsent()" id="consent" style="display: none">Consent</button>
    <div id="divGraphProfile" style="display: none"></div>
    <h4 id="successMsg"></h4>
    <div id="feed-container" style="display: none;background-image: url('https://sharegate.com/app/uploads/2017/08/usemsteamslikearockstar-digest-thumbnail2x-920x517.png');">
        <div class="radioClass">
            <label><input type="radio" name="notificationRadio" value="sendNotificationChannel"> Send Notification To User in Channel</label></br>
            <label><input type="radio" name="notificationRadio" value="customTopicNotificationChannel"> Send Notification with Custom Topic in Channel</label></br>
            <label><input type="radio" name="notificationRadio" value="notificationChannelTab"> Notify User about a channel Tab</label></br>
            <label><input type="radio" name="notificationRadio" value="sendDefaultNotification"> Send default notification to user</label>
        </div></br>
        <div class="sendNotificationChannel desc">
            <div class="mb">
                @*<div class="tk-no" id="taskNumber">@ViewBag.newTaskID</div>*@
                <input type="text" class="tk-no" id="taskNumber" value="@ViewBag.taskId" disabled>
                <div class="input-grp">
                    @*    <input type="text" class="alias" id="taskAssignedTo" required />*@
                </div>
                <div class="form-group fg">
                    <label for="title" class="title">Task Title</label>
                    <div>
                        @Html.TextBoxFor(model => model.title, htmlAttributes: new { @class = "form-control", @id = "title" })
                    </div>
                </div>
                <div class="form-group fg">
                    <label for="title-desc" class="description">Task Description</label>
                    @Html.TextAreaFor(model => model.description, htmlAttributes: new { @class = "form-control title-desc", @id = "description" })
                    @Html.ValidationMessageFor(model => model.title)
                </div>
            </div>
            <div class="modal-footer mf">
                <button type="button" class="btn-send save" onclick="return SendNotificationToChannel()">Send Notification to Channel</button>
            </div>
        </div>
        <div class="customTopicNotificationChannel desc">
            <div class="mb">
                @*<div class="tk-no" id="taskNumber">@ViewBag.newTaskID</div>*@
                <input type="text" class="tk-no" id="deploymentId" value="@ViewBag.taskId" disabled>
                <div class="input-grp">
                    @*    <input type="text" class="alias" id="taskAssignedTo" required />*@
                </div>
                <div class="form-group fg">
                    <label for="DeployementTitle" class="DeployementTitle">Deployment Title</label>
                    @Html.TextBoxFor(model => model.DeployementTitle, htmlAttributes: new { @class = "form-control", @id = "DeployementTitle" })
                </div>
                <div class="form-group fg">
                    <label for="deployment-desc" class="DeploymentDescription">Deployment Description</label>
                    @Html.TextAreaFor(model => model.DeploymentDescription, htmlAttributes: new { @class = "form-control deployment-desc", @id = "DeploymentDescription" })
                    @Html.ValidationMessageFor(model => model.title)
                </div>
            </div>
            <div class="modal-footer mf">
                <button type="button" class="btn-send save" onclick="return customTopicTeamNotification()">Notify with Custom Topic in Channel</button>
            </div>
        </div>
        <div class="notificationChannelTab desc">
            <div class="mb">
                <input type="text" class="tk-no" id="deploymentId" value="@ViewBag.taskId" disabled>
                <div class="input-grp">
                </div>
                <div class="form-group fg">
                    <label for="reservationId" class="reservationId">ID</label>
                    <div>
                        @Html.TextBoxFor(model => model.reservationId, htmlAttributes: new { @class = "form-control", @id = "reservationId" })
                    </div>
                </div>
                <div class="form-group fg">
                    <label for="reservationTitle" class="reservationTitle">Reservation Title</label>
                    @Html.TextBoxFor(model => model.reservationTitle, htmlAttributes: new { @class = "form-control", @id = "reservationTitle" })
                </div>
                <div class="form-group fg">
                    <label for="currentSlot-desc" class="currentSlot">Current Slot</label>
                    <div>
                        @Html.TextAreaFor(model => model.currentSlot, htmlAttributes: new { @class = "form-control currentSlot-desc", @id = "currentSlot" })
                        @Html.ValidationMessageFor(model => model.title)
                    </div>
                </div>
            </div>
            <div class="modal-footer mf">
                <button type="button" class="btn-send save" onclick="return channelTabTeamNotification()">Notify User for channel Tab</button>
            </div>
        </div>
        <div class="sendDefaultNotification desc">
            <div class="modal-footer mf">
                <button type="button" class="btn-send save" onclick="return SendDefaultNotification()">Send default notification to Channel</button>
            </div>
        </div>
    </div>
    @Html.Partial("Details")
</body>
</html>