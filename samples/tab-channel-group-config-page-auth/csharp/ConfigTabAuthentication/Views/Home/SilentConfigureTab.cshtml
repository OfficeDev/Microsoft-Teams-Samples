@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<p>
    This sample demonstrates silent authentication in a Microsoft Teams tab.
</p>
<p>
    The tab will try to get an id token for the user silently, validate the token and show the profile information decoded from the token.
    The "Login" button will appear only if silent authentication failed.
</p>

<!-- Login button -->
<button id="btnLogin" onclick="login()" style="display: none">Login to Azure AD</button>

<!-- Result -->
<p>
    <div id="divError" style="display: none"></div>
    <div id="divProfile" style="display: none">
        <div><b>Name:</b> <span id="profileDisplayName" /></div>
        <div><b>UPN:</b> <span id="profileUpn" /></div>
        <div><b>Object id:</b> <span id="profileObjectId" /></div>
    </div>
    <div style="height: 50px">
    </div>
    <div id="divSilentSignOut" style="display: none">
        <button onclick="SilentLogout()">Sign Out</button>
    </div>
</p>
<script type="text/javascript">
        let msalConfig = {
            auth: {
                clientId: '@ViewBag.ClientId',
                redirectUri: window.location.origin + "/SilentAuthEnd",     // This should be in the list of redirect uris for the AAD app
                navigateToLoginRequestUrl: false,
            },
            cache: {
                cacheLocation: "localStorage",
            }
        };

        const msalInstance = new msal.PublicClientApplication(msalConfig);

        microsoftTeams.app.initialize().then(() => {
            microsoftTeams.pages.config.registerOnSaveHandler(function (saveEvent) {
                var radios = document.getElementsByName('notificationType');

                microsoftTeams.pages.config.setConfig({
                    entityId: 'Silent Authentication',
                    contentUrl: window.location.origin + "/Home/Index",
                    configName: 'SilentAuthentication'
                });
                saveEvent.notifySuccess();
            });

            localStorage.setItem("Client", msalConfig.auth.clientId)
            let upn = undefined;
            microsoftTeams.app.getContext().then((context) => {
                upn = context.user.userPrincipalName;
                loadData(upn);
            });
        });

        // Loads data for the given user
        function loadData(upn) {
            let cachedAccounts =  msalInstance.getAllAccounts();
            let accountInfo = cachedAccounts.filter(account => account.username === upn);
            if (accountInfo.length > 0) {

                const silentRequest = {
                    account: accountInfo[0]
                };

                // Acquire Token Silently
                msalInstance.acquireTokenSilent(silentRequest)
                .then((response) => {
                    if (response.idToken) {
                        showProfileInformation(response.idToken);
                    } else {
                        $("#btnLogin").css({ display: "" });
                    }
                })
                .catch((error) => {
                    console.log(error);
                    $("#btnLogin").css({ display: "" });
                });
            }
            else {
                $("#btnLogin").css({ display: "" });
            }
        }

        // Login to Azure AD
        function login() {
            $("#divError").text("").css({ display: "none" });
            $("#divProfile").css({ display: "none" });
            $("#divSilentSignOut").css({ display: "none" });


            microsoftTeams.authentication.authenticate({
                url: window.location.origin + "/AuthStart",
                width: 600,
                height: 535
            }).then((result) => {
                // AuthenticationContext is a singleton
                cachedAccounts =  msalInstance.getAllAccounts();

                microsoftTeams.app.getContext().then((context) => {
                    let accountInfo = cachedAccounts.filter(account => account.username === context.user.userPrincipalName);

                    if (accountInfo.length > 0) {
                        const silentRequest = {
                            account: accountInfo[0]
                        };

                        // Acquire Token Silently
                        msalInstance.acquireTokenSilent(silentRequest)
                        .then((response) => {
                            if (response.idToken) {
                                showProfileInformation(response.idToken);
                            } else {
                                console.error("Error getting cached id token. This should never happen.");
                                // At this point we have to get the user involved, so show the login button
                                $("#btnLogin").css({ display: "" });
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                    }
                });
            }).catch((reason) => {
                console.log("Login failed: " + reason);
                if (reason === "CancelledByUser" || reason === "FailedToOpenWindow") {
                    console.log("Login was blocked by popup blocker or canceled by user.");
                }
                // At this point we have to get the user involved, so show the login button
                $("#btnLogin").css({ display: "" });

                $("#divError").text(reason).css({ display: "" });
                $("#divProfile").css({ display: "none" });
                $("#divSilentSignOut").css({ display: "none" });
            });
        }

        // Get the user's profile information from the id token
        function showProfileInformation(idToken) {
            $.ajax({
                url: window.location.origin + "/Home/ValidateToken?validToken=" + idToken,
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + idToken);
                },
                success: function (token) {
                    var token = JSON.parse(token);
                    $("#profileDisplayName").text(token.name);
                    $("#profileUpn").text(token.preferred_username);
                    $("#profileObjectId").text(token.oid);
                    $("#divProfile").css({ display: "" });
                    $("#divSilentSignOut").css({ display: "" });
                    $("#divError").css({ display: "none" });
                    microsoftTeams.pages.config.setValidityState(true);

                    localStorage.setItem("displayName", token.name);

                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    $("#divError").text(errorThrown).css({ display: "" });
                    $("#divProfile").css({ display: "none" });
                    $("#divSilentSignOut").css({ display: "none" });
                },
            });
        }

    function SilentLogout() {
        localStorage.clear();
        window.location.href = "@Url.Action("ChooseAuth", "Home")";
    }

    microsoftTeams.app.initialize().then(() => {
        microsoftTeams.pages.config.registerOnSaveHandler(function(saveEvent) {
            var radios = document.getElementsByName('notificationType');

            microsoftTeams.pages.config.setConfig({
                entityId: 'Silent Authentication',
                contentUrl: window.location.origin + "/Home/Index",
                configName: 'SilentAuthentication'
            });
            saveEvent.notifySuccess();
        });
    });

</script>