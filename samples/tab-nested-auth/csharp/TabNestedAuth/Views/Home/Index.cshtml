@{
    ViewData["Title"] = "Home Page"; // Sets the title of the page to "Home Page"
    Layout = "_Layout"; // Specifies the layout to be used for this page
}

<head>
    <style>
        /* Styles for the login button */
        .loginBtn {
            background-color: rgb(91, 95, 199);
            border: 1px solid rgb(91, 95, 199);
            border-radius: 4px;
            box-sizing: border-box;
            color: #FFFFFF;
            cursor: pointer;
            font-family: Graphik, -apple-system, system-ui, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
            line-height: 1.15;
            padding: 12px 16px;
            width: 5rem;
        }

        /* Styles for displaying user data */
        .userData {
            font-family: Segoe UI;
            white-space: pre-wrap;
        }
    </style>
</head>

<script src="https://res.cdn.office.net/teams-js/2.26.0/js/MicrosoftTeams.min.js"
        integrity="sha384-gqPg5qCjdUgTGRZ/stLskrnJllL5h5+f4kTqvxVqtl2FdT7PVRa9Q7zq4gFlZ7bO"
        crossorigin="anonymous"></script>
<script src="~/js/msal-browser.min.js"></script>

<script type="text/javascript">
    let pca = undefined; // Public client application instance

    const msalConfig = {
        auth: {
            clientId: "@ViewBag.clientId",
            authority: "https://login.microsoftonline.com/common",
        }
    };

    // Function to initialize the public client application
    function initializePublicClient() {
        microsoftTeams.app.initialize(); // Initialize the Teams app context

        console.log("Starting initializePublicClient");
        return msal.createNestablePublicClientApplication(msalConfig).then(
            (result) => {
                console.log("Client app created");
                pca = result; // Set the global pca variable to the created client application
                return pca;
            }
        ).catch((error) => {
            console.error("Failed to initialize MSAL client application:", error);
        });
    }

    // Function to get the active account
    const getActiveAccount = async () => {
        console.log("Starting getActiveAccount"); // Attempt to get the active account from MSAL
        let activeAccount = null;
        try {
            console.log("Getting active account");
            activeAccount = pca.getActiveAccount();
        } catch (error) {
            console.error("Error getting active account:", error);
        }

        if (!activeAccount) {
            console.log("No active account, trying login popup");
            try {
                // Get Teams context to filter the accounts
                const context = await microsoftTeams.app.getContext();
                const accountFilter = {
                    tenantId: context.user?.tenant?.id,
                    homeAccountId: context.user?.id,
                    loginHint: context.user?.loginHint
                };
                const accountWithFilter = pca.getAccountByHomeId(accountFilter.homeAccountId);
                if (accountWithFilter) {
                    activeAccount = accountWithFilter; // Set the filtered account as the active account
                    pca.setActiveAccount(activeAccount);
                }
            } catch (error) {
                console.error("Error retrieving account using Teams context:", error);
            }
        }

        return activeAccount;
    }

    // Function to get the token for the user
    const getToken = async () => {
        console.log("getToken");
        let activeAccount = await getActiveAccount(); // Get the active account first
        const tokenRequest = {
            scopes: ["User.Read"], // Specify the scopes needed for the token
            account: activeAccount || undefined, // Use the active account if available, else undefined
        };
        return pca.acquireTokenSilent(tokenRequest)
            .then((result) => {
                console.log("Token acquired silently:", result);
                return result.accessToken;
            })
            .catch((error) => {
                console.warn("Silent token acquisition failed, attempting popup:", error);
                return pca.acquireTokenPopup(tokenRequest) // Attempt to acquire the token silently
                    .then((result) => {
                        console.log("Token acquired via popup:", result);
                        return result.accessToken; // Return the acquired token
                    })
                    .catch((error) => {
                        console.error("Failed to acquire token via popup:", error);
                        return undefined; // Return undefined to indicate an error occurred
                    });
            });
    }

    const login = async () => {
        document.getElementById("loadingData").style.display = "block";
        console.log("Login Successfully");
        await microsoftTeams.app.initialize(); // Initialize the Teams app context
        // Check if nested app auth is supported
        let isNAAResults = await microsoftTeams.nestedAppAuth.isNAAChannelRecommended();
        console.log("isNAAChannelRecommended" + isNAAResults);
        if (isNAAResults) {
            console.log("Nested app auth capabilities supported");
            return initializePublicClient().then((_client) => {
                return getToken().then((token) => {
                    if (token) {
                        console.log("Token acquired successfully:", token);
                        callApi(token); // Call the API if the token is acquired successfully
                    } else {
                        console.error("Failed to acquire token");
                    }
                });
            });
        } else {
            console.log("Nested app auth capabilities not supported");
        }
    };

    // Function to call the Microsoft Graph API with the access token
    async function callApi(accessToken) {
        try {
            const response = await fetch(
                `https://graph.microsoft.com/v1.0/me`, // Endpoint to get user profile data
                {
                    headers: { Authorization: `Bearer ${accessToken}` }, // Include the access token in the request headers
                }
            );
            if (response.ok) {
                // Parse and set the user data
                const jsonValue = await response.json();
                const alignedJSON = JSON.stringify(jsonValue, null, 2); // Pretty-print the JSON response
                console.log("User data:", alignedJSON);

                const userDataElement = document.getElementById("userData");
                if (userDataElement) {
                    document.getElementById("loadingData").style.display = "none";
                    userDataElement.textContent = alignedJSON; // Display the user data on the page
                    document.getElementById("loginBtn").style.display = "none"; // Hide the login button
                    document.getElementById("welcomeData").style.display = "block"; // Show the welcome message
                }
            } else {
                const errorText = await response.text();
                console.error("Microsoft Graph call failed - error text: " + errorText);
            }
        } catch (error) {
            console.error("Network error: ", error);
        }
    }
</script>

<div>
    <!-- Login button triggers the login function -->
    <button id="loginBtn" class="loginBtn" onclick="login()">Login</button>
</div>
<!-- Welcome message -->
    <h2 id="loadingData" style="display: none;" class="loadingData">Loading...</h2>
    <h1 id="welcomeData" style="display: none;" class="welcomeData">Welcome! Your login information:</h1>
    <div id="userData" class="userData">
</div>  <!-- Container for displaying user data -->