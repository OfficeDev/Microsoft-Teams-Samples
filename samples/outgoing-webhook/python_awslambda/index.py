''' Lambda Responder '''
import json
import base64
import hmac
import hashlib

SHARED_SECRET = "<Security token generated by Microsoft Teams>"


def handler(event, context):
    ''' Main handler '''
    print('received event:')
    print(event)

    # Retrieve request from event:
    payload = event['body']

    # Respond the request
    try:
        # Retrieve authorization HMAC information
        headers = event['headers']
        auth = headers['Authorization']

        # Calculate HMAC on the message we've received using the shared secret
        base64secret = base64.urlsafe_b64decode(SHARED_SECRET)
        digest = hmac.new(base64secret,
                          msg=payload.encode('utf-8'), digestmod=hashlib.sha256).digest()
        signature = "HMAC %s" % base64.b64encode(digest).decode()

        # print('Computed HMAC: %s' % signature)
        # print('Received HMAC: %s' % auth)

        if signature == auth:
            received_message = json.loads(payload)
            text_message = "You typed: %s" % received_message['text']
            response_message = {
                'type': 'message',
                'text': text_message
            }
        else:
            response_message = {
                'type': 'message',
                'text': 'Error: message sender cannot be authenticated.'
            }

        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Headers': '*',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps(response_message)
        }
    except Exception as error:
        error_message = 'Error: %s' % error
        response_message = {
            'errorMessage': error_message
        }
        return {
            'statusCode': 400,
            'body': json.dumps(response_message)
        }
