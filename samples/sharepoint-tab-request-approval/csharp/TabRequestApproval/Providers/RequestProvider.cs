// <copyright file="RequestProvider.cs" company="Microsoft">
// Copyright (c) Microsoft. All rights reserved.
// </copyright>

namespace TabActivityFeed.Providers
{
	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;
	using System.Net.Http;
	using System.Threading.Tasks;
	using Microsoft.Graph;
	using Newtonsoft.Json;
	using NuGet.Protocol;
	using TabRequestApproval.Model;

	/// <summary>
	/// Represents the request provider.
	/// </summary>
	public class RequestProvider : IRequestProvider
    {
        /// <summary>
        /// Represents the auth provider.
        /// </summary>
        private readonly IAuthProvider authProvider;

        /// <summary>
        /// Represents the container provider.
        /// </summary>
        private readonly IContainerProvider containerProvider;

        /// <summary>
        /// Represents the drive item provider.
        /// </summary>
        private readonly IDriveItemProvider driveItemProvider;

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestProvider"/> class.
        /// </summary>
        /// <param name="authProvider">Represents the auth provider.</param>
        /// <param name="containerProvider">Represents the container provider.</param>
        /// <param name="driveItemProvider">Represents the drive item provider.</param>
        public RequestProvider(IAuthProvider authProvider, IContainerProvider containerProvider, IDriveItemProvider driveItemProvider)
        {
            this.authProvider = authProvider ?? throw new ArgumentNullException(nameof(authProvider));
            this.containerProvider = containerProvider ?? throw new ArgumentNullException(nameof(containerProvider));
            this.driveItemProvider = driveItemProvider ?? throw new ArgumentNullException(nameof(driveItemProvider));
        }

        /// <summary>
        /// Creates a request within the database.
        /// </summary>
        /// <param name="requestInfo">Represents the request information.</param>
        /// <param name="teamsAppInstallationScopeId">Represents the container id calculated by the developer.</param>
        /// <returns>The created request info object.</returns>
        public async Task CreateRequestAsync(RequestInfo requestInfo, string teamsAppInstallationScopeId)
        {
            try
            {
                // Acquire access tokens.
                string graphAccessToken = await this.authProvider.GetGraphAccessTokenAsync().ConfigureAwait(false);

                string containerId = this.containerProvider.GetContainerIdFromTeamsAppInstallationScopeId(teamsAppInstallationScopeId);

                // Check if container to store requests exists.
                Models.Container container = await this.containerProvider.CreateOrGetContainerAsync(graphAccessToken, containerId, teamsAppInstallationScopeId).ConfigureAwait(false);

                Stream stream = await TranslateRequestInfoToStreamAsync(requestInfo).ConfigureAwait(false);

                /* NOTE: In this 3P Scenario, the developers have decided to store each request (a datapoint) as a file.
                 * This is because of the simplicity of the application. And so, each request will be a drive item.
                 *
                 * This may not necessarily be the case in your scenario. Feel free to store data in a way that best meets
                 * your needs.
                 *
                 * Furthermore, in this 3P scenario, the name of the file needs to be the unique identifier that you wish to
                 * set for the file. The developers could have used the GUID generated by the driveItem, but that would also need to be
                 * the GUID for their RequestInfo objects.
                 */
                await this.driveItemProvider.CreateFileAsync(graphAccessToken, container.id, container.id, requestInfo.taskId, stream).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                throw new Exception($"Unable to create request. Reason{ex.Message}");
            }
        }

        /// <summary>
        /// Retrieves all the requests stored within the database.
        /// </summary>
        /// <param name="teamsAppInstallationScopeId">Represents the container id calculated by the developer.</param>
        /// <returns>An iterable object containing all requests.</returns>
        public async Task<IEnumerable<RequestInfo>> GetRequestsAsync(string teamsAppInstallationScopeId)
        {
            try
            {
                // Acquire relevant tokens.
                string graphAccessToken = await this.authProvider.GetGraphAccessTokenAsync().ConfigureAwait(false);

                // Check if container to store requests exists.
                string containerId = this.containerProvider.GetContainerIdFromTeamsAppInstallationScopeId(teamsAppInstallationScopeId);

                List<RequestInfo> requestInfoList = new List<RequestInfo>();

                if (containerId == null)
                {
                    return requestInfoList;
                }
                else
                {
                    // Retrieve all drive items.
                    IEnumerable<DriveItem> driveItems = await this.driveItemProvider.GetDriveItemsAsync(graphAccessToken, containerId).ConfigureAwait(false);

                    // Iterate over driveItems and translate into request objects.
                    foreach (DriveItem driveItem in driveItems)
                    {
                        RequestInfo requestInfo = await this.TranslateDriveItemToRequestInfoObjectAsync(graphAccessToken, containerId, driveItem).ConfigureAwait(false);

                        // Add deserialized requestInfo object to list.
                        requestInfoList.Add(requestInfo);
                    }

                    return requestInfoList;
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Unable to read requests. Reason: {ex.Message}");
            }
        }

        /// <summary>
        /// Retrieves the request with the specified id from the database.
        /// </summary>
        /// <param name="requestId">Represents the request id.</param>
        /// <param name="teamsAppInstallationScopeId">Represents the container id calculated by the developer.</param>
        /// <returns>The specified request.</returns>
        public async Task<RequestInfo> GetRequestAsync(string requestId, string teamsAppInstallationScopeId)
        {
            try
            {
                // Acquire relevant tokens.
                string graphAccessToken = await this.authProvider.GetGraphAccessTokenAsync().ConfigureAwait(false);

                // Retrieve the container.
                string containerId = this.containerProvider.GetContainerIdFromTeamsAppInstallationScopeId(teamsAppInstallationScopeId);

                if (containerId != null)
                {
                    // Search for the item.
                    IEnumerable<DriveItem> driveItems = await this.driveItemProvider.GetDriveItemsAsync(graphAccessToken, containerId).ConfigureAwait(false);

                    // request id is being used to find drive item.
                    IEnumerable<DriveItem> matchedDriveItems = driveItems.Where(driveItem => driveItem.Name == $"{requestId}.txt");

                    // Retrieve first matched item because there will only ever be 1 matched due to the nature of the file naming convention.
                    DriveItem matchedDriveItem = matchedDriveItems.FirstOrDefault();

                    // Convert a DriveItem object into a RequestInfo object.
                    RequestInfo requestInfo = await this.TranslateDriveItemToRequestInfoObjectAsync(graphAccessToken, containerId, matchedDriveItem).ConfigureAwait(false);

                    // Return request.
                    return requestInfo;
                }
                else
                {
                    throw new Exception("Unable to retrieve request. Reason: Specified container does not exist.");
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Unable to Read Request. Reason: {ex.Message}");
            }
        }

        /// <summary>
        /// Updates the specified request.
        /// </summary>
        /// <param name="requestId">Represents the request id.</param>
        /// <param name="requestInfo">Represents the updated request.</param>
        /// <param name="teamsAppInstallationScopeId">Represents the container id calculated by the developer.</param>
        /// <returns>The updated request.</returns>
        public async Task<RequestInfo> UpdateRequestAsync(string requestId, RequestInfo requestInfo, string teamsAppInstallationScopeId)
        {
            try
            {
                // Acquire relevant tokens.
                string graphAccessToken = await this.authProvider.GetGraphAccessTokenAsync().ConfigureAwait(false);

                // Retrieve the container.
                string containerId = this.containerProvider.GetContainerIdFromTeamsAppInstallationScopeId(teamsAppInstallationScopeId);

                if (containerId != null)
                {
                    // Create driveItem from updated requestInfo object by translating into stream.
                    Stream stream = await RequestProvider.TranslateRequestInfoToStreamAsync(requestInfo).ConfigureAwait(false);

                    // Update driveItem.
                    DriveItem updatedDriveItem = await this.driveItemProvider.UpdateDriveItemAsync(graphAccessToken, containerId, requestId, stream).ConfigureAwait(false);

                    // Convert a driveItem object into a requestInfo object.
                    RequestInfo updatedRequestInfo = await this.TranslateDriveItemToRequestInfoObjectAsync(graphAccessToken, containerId, updatedDriveItem).ConfigureAwait(false);

                    // Return request.
                    return updatedRequestInfo;
                }
                else
                {
                    throw new Exception("Unable to update request. Reason: Container id was not found.");
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Unable to update request. Reason: {ex.Message}");
            }
        }

        /// <summary>
        /// Translates driveItem to a requestInfo object.
        /// </summary>
        /// <param name="graphAccessToken">Represents the graph access token.</param>
        /// <param name="driveId">Represents the drive id.</param>
        /// <param name="driveItem">Represents the drive item that is being converted.</param>
        /// <returns>A RequestInfo object.</returns>
        private async Task<RequestInfo> TranslateDriveItemToRequestInfoObjectAsync(string graphAccessToken, string driveId, DriveItem driveItem)
        {
            try
            {
                // Obtain content of the driveItem.
                HttpResponseMessage content = await this.driveItemProvider.GetFileDownloadUrlAsync(graphAccessToken, driveId, driveItem.Id).ConfigureAwait(false);

                // Convert content into a string format. The content is a stringified json object.
                string requestInfoString = await content.Content.ReadAsStringAsync().ConfigureAwait(false);

                // Convert stringified json object into the object shape of choice.
                RequestInfo requestInfo = JsonConvert.DeserializeObject<RequestInfo>(requestInfoString);

                // Return object.
                return requestInfo;
            }
            catch (Exception ex)
            {
                throw new Exception($"Unable to translate DriveItem to RequestInfo object. Reason: {ex.Message}");
            }
        }

        /// <summary>
        /// Translates requestInfo object to stream object.
        /// </summary>
        /// <param name="requestInfo">Represents requestInfo object.</param>
        /// <returns>Stream containing the requestInfo data.</returns>
        private static async Task<Stream> TranslateRequestInfoToStreamAsync(RequestInfo requestInfo)
        {
            try
            {
                // Generate stream to write data
                Stream stream = new MemoryStream();

                var writer = new StreamWriter(stream);

                // Write data.
                string data = requestInfo.ToJson().ToString();

                await writer.WriteAsync(data).ConfigureAwait(false);
                await writer.FlushAsync().ConfigureAwait(false);

                // Reset pointer otherwise future readings will return null-like values.
                stream.Position = 0;

                // Return stream.
                return stream;
            } catch (Exception ex)
            {
                throw new Exception($"Unable to translate RequestInfo object into Stream. Reason: {ex.Message}");
            }
        }
    }
}
